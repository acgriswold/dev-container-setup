import * as fs from 'fs'
import * as path from 'path'
import * as rimraf from 'rimraf'
import mime from 'mime';

export async function generateMock() {
    console.log("Generating data for seed...")

    await Promise.all([
        _writeMock(),
        _writeReadme(),
    ])

    console.log("âœ… Done!")
}

async function _writeReadme() {
    const readmePath = path.resolve('drizzle/mock/README.md')
    const readmeContent = `\`\`\`
THESE FILES WERE AUTOGENERATED. DO NOT EDIT THE CONTENTS OF THESE FILES - Adam Griswold
\`\`\`
    `;

    fs.writeFileSync(readmePath, readmeContent);


}

async function _writeMock() {
    const registryPath = path.relative('.', 'registry')
    const indexPath = path.resolve('drizzle/mock/seed.mock.ts');
    
    // CLEAR REGISTRY
    rimraf.sync(indexPath)

    // let indexContent = `// @ts-nocheck
    let indexContent = `// This file is autogenerated by drizzle/commands/seed-generate-mock.ts
// Do not edit this file directly.

import { NewTemplate } from '@/drizzle/schema/templates'

export const seed: NewTemplate[] = [
`


    fs.readdir(registryPath, function (err, files) {
        //handling error
        if (err) {
            return console.log('Unable to scan directory: ' + err);
        }
        //listing all files using forEach
        files.forEach(function (file) {
            const filePath = path.join(registryPath, file)
            const mimeType = mime.getType(filePath)
            const fileExtension = path.extname(filePath)
            const fileName = path.basename(filePath, fileExtension)

            indexContent += `   {
        name: "${fileName}",
        extension: "${fileExtension}",
        description: undefined,
        type: "${mimeType}",
        file: "${filePath}",`

            // Do whatever you want to do with the file
            indexContent += `
    },`

        });

        indexContent += `
];`
        // Write style index.
        fs.writeFileSync(indexPath, indexContent)
    });
}