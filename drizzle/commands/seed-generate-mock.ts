import * as fs from 'fs'
import * as path from 'path'
import * as rimraf from 'rimraf'
import mime from 'mime';

export async function generateMock() {
    console.log("Generating data for seed...")

    await Promise.all([
        _writeMock(),
        _writeReadme(),
    ])

    console.log("âœ… Done!")
}

async function _writeReadme() {
    const readmePath = path.resolve('drizzle/mock/README.md')
    const readmeContent = `\`\`\`
THESE FILES WERE AUTOGENERATED. DO NOT EDIT THE CONTENTS OF THESE FILES - Adam Griswold
\`\`\`
    `;

    fs.writeFileSync(readmePath, readmeContent);
}

async function _writeMock() {
    const registryPath = path.relative('.', 'registry')
    const indexPath = path.resolve('drizzle/mock/seed.mock.ts');

    // CLEAR REGISTRY
    rimraf.sync(indexPath)

    // let indexContent = `// @ts-nocheck
    let indexContent = [`// This file is autogenerated by drizzle/commands/seed-generate-mock.ts
// Do not edit this file directly.

import { NewTemplate } from '@/drizzle/schema/templates'

export const seed: NewTemplate[] = [`]

    const files = fs.readdirSync(registryPath)

    //listing all files using forEach
    addFileContent(registryPath, indexContent, files)

    indexContent.push(`
];`)

    // Write style index.
    const contentString = indexContent.join("")
    fs.writeFileSync(indexPath, contentString)
}

function addFileContent(contentPath: string, indexContent: string[], files: string[]) {
    files.forEach(function (file) {
        const filePath = path.join(contentPath, file)

        if (fs.lstatSync(filePath).isDirectory()) {
            const internalFiles = fs.readdirSync(filePath)
            addFileContent(filePath, indexContent, internalFiles)
        } else {
            addFileContentInternal(filePath, indexContent)
        }
    });
}

function addFileContentInternal(contentPath: string, indexContent: string[]) {
    const mimeType = mime.getType(contentPath)
    const fileName = path.basename(contentPath)

    indexContent.push(`
    {
        name: "${fileName}",
        description: undefined,
        type: "${mimeType}",
        file: "${contentPath}",`)

    // Do whatever you want to do with the file
    indexContent.push(`
    },`)
}